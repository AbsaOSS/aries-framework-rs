name: CI

on: [push, pull_request]

jobs:
  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_LOWERCASE: ${{ steps.mainstep.outputs.GITHUB_REPOSITORY_LOWERCASE }}
      BRANCH_NAME: ${{ steps.mainstep.outputs.BRANCH_NAME }}
      DOCKER_TAG_VERSION: ${{ steps.mainstep.outputs.DOCKER_TAG_VERSION }}
      RELEASE_VERSION: ${{ steps.mainstep.outputs.RELEASE_VERSION }}
      CACHE_KEY_AGENCY: ${{ steps.mainstep.outputs.CACHE_KEY_AGENCY }}
      CACHE_KEY_LIBVCX: ${{ steps.mainstep.outputs.CACHE_KEY_LIBVCX }}
      CACHE_KEY_POOL: ${{ steps.mainstep.outputs.CACHE_KEY_POOL }}
      DOCKER_IMG_NAME_POOL: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_POOL }}
      DOCKER_IMG_NAME_AGENCY: docker.pkg.github.com/absaoss/vcxagencynode/vcxagency-node:0.1.0
      DOCKER_IMG_NAME_LIBVCX: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_LIBVCX }}
    steps:
      - run: echo $GITHUB_REPOSITORY
      - run: echo $GITHUB_REF
      - run: echo $GITHUB_HEAD_REF
      - run: echo $GITHUB_BASE_REF
      - run: echo $GITHUB_WORKSPACE
      - run: echo $GITHUB_EVENT_NAME
      - run: echo $GITHUB_RUN_NUMBER
      - run: echo $GITHUB_RUN_ID
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Set custom env variables
        run: |
          set -x
          GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY_LOWERCASE)

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)

          DOCKER_TAG_VERSION="$BRANCH_NAME"

          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)
          echo "Docker images built in this CI will be using tag '$DOCKER_TAG_VERSION'"

          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)

          echo ::set-env name=AGENCY_CACHE::$(echo ${{ hashFiles('agency.Dockerfile') }})
          echo ::set-env name=LIBVCX_HASH::$(echo ${{ hashFiles('libvcx') }})
          echo ::set-env name=POOL_HASH::$(echo ${{ hashFiles('indy-pool.dockerfile') }})

      - name: Set and print outputs
        id: mainstep
        run: |
          set -x
          echo "::set-output name=GITHUB_REPOSITORY_LOWERCASE::$GITHUB_REPOSITORY_LOWERCASE"
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-output name=DOCKER_TAG_VERSION::$DOCKER_TAG_VERSION"
          echo "::set-output name=CACHE_KEY_AGENCY::$DOCKER_IMG_NAME_AGENCY"
          echo "::set-output name=CACHE_KEY_LIBVCX::$(echo reposlug-$FULL_REPO_SLUG-branch-$BRANCH_NAME-hash-$LIBVCX_HASH)"
          echo "::set-output name=CACHE_KEY_POOL::$(echo reposlug-$FULL_REPO_SLUG-branch-$BRANCH_NAME-hash-$POOL_HASH)"
          echo "::set-output name=DOCKER_IMG_NAME_AGENCY::$DOCKER_IMG_NAME_AGENCY"
          echo "::set-output name=DOCKER_IMG_NAME_LIBVCX::libvcx:$DOCKER_TAG_VERSION"
          echo "::set-output name=DOCKER_IMG_NAME_POOL::indypool:$DOCKER_TAG_VERSION"


  build-image-indypool:
    needs:
      - workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_POOL::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_POOL}})
          echo ::set-env name=DOCKER_IMG_NAME_POOL::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_POOL}})
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_POOL }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build -f indy-pool.dockerfile \
                       -t "$DOCKER_IMG_NAME_POOL" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_POOL" > /tmp/imgcache/img_indypool.rar

#  build-image-ubuntu16-libindy:
#    needs:
#      - workflow-setup
#    runs-on: ubuntu-16.04
#    env:
#      DOCKER_BUILDKIT: 1
#      INDYSDK_REPO: "https://github.com/hyperledger/indy-sdk"
#      INDYSDK_REVISION: "1.15.0"
#    steps:
#      - name: Load up custom variables
#        run: |
#          echo ::set-env name=CACHE_KEY_LIBINDY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_LIBINDY}})
#          echo ::set-env name=DOCKER_IMG_NAME_LIBINDY::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBINDY}})
#      - name: Git checkout
#        uses: actions/checkout@v2
#      - name: Try load from cache.
#        id: cache-image
#        uses: actions/cache@v2
#        with:
#          path: /tmp/imgcache
#          key: ${{ env.CACHE_KEY_LIBINDY }}
#      - name: If NOT found in cache, build and cache image.
#        if: steps.cache-image.outputs.cache-hit != 'true'
#        run: |
#          set -x
#          INDYSDK_REVISION=$(git describe --tags --always --abbrev=0)
#          docker build --build-arg "INDYSDK_REPO=$INDYSDK_REPO" \
#                       --build-arg "INDYSDK_REVISION=v$INDYSDK_REVISION" \
#                       -f libindy.Dockerfile \
#                       -t "$DOCKER_IMG_NAME_LIBINDY" \
#                        .
#          mkdir -p /tmp/imgcache
#          docker save "$DOCKER_IMG_NAME_LIBINDY" > /tmp/imgcache/img_base.rar

  build-image-vcxagency:
    runs-on: ubuntu-16.04
    needs:
      - workflow-setup
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Login to docker
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Load base image cache
        id: load-cached-image-node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: $DOCKER_IMG_NAME_AGENCY
      - name: If no cached image found, pull and save to cache
        if: steps.load-cached-image-node.outputs.cache-hit != 'true'
        run: |
          set -x
          docker pull $DOCKER_IMG_NAME_AGENCY
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_AGENCY" > /tmp/imgcache/img_agency.rar
          docker image rm "$DOCKER_IMG_NAME_AGENCY"
      - name: Load agency image from cache
        run: |
          docker load < /tmp/imgcache/img_agency.rar

  build-image-libvcx:
    needs:
      - workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
      INDYSDK_REPO: "https://github.com/hyperledger/indy-sdk"
      INDYSDK_REVISION: "1.15.0"
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_LIBVCX::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_LIBVCX}})
          echo ::set-env name=DOCKER_IMG_NAME_LIBVCX::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBVCX}})
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBVCX }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build --build-arg "INDYSDK_REPO=$INDYSDK_REPO" \
                       --build-arg "INDYSDK_REVISION=v$INDYSDK_REVISION" \
                       -f libvcx.Dockerfile\
                       -t "$DOCKER_IMG_NAME_LIBVCX" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_LIBVCX" > /tmp/imgcache/img_libvcx.rar

#
#  #
#  #  ██      ██ ██████  ██    ██  ██████ ██   ██ 
#  #  ██      ██ ██   ██ ██    ██ ██       ██ ██  
#  #  ██      ██ ██████  ██    ██ ██        ███  
#  #  ██      ██ ██   ██  ██  ██  ██       ██ ██ 
#  #  ███████ ██ ██████    ████    ██████ ██   ██ 
#  #
#
  test-libvcx:
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    needs: [build-image-indypool, build-image-libvcx, build-image-vcxagency]
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Docker setup
        run: |
          echo ::set-env name=CACHE_KEY_POOL::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_POOL}})
          echo ::set-env name=CACHE_KEY_AGENCY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_AGENCY}})
          echo ::set-env name=CACHE_KEY_LIBVCX::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_LIBVCX}})
          echo ::set-env name=DOCKER_IMG_NAME_POOL::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_POOL}})
          echo ::set-env name=DOCKER_IMG_NAME_AGENCY::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_AGENCY}})
          echo ::set-env name=DOCKER_IMG_NAME_LIBVCX::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBVCX}})
      - name: Load indy-pool image node
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_POOL }}
      - name: Load pool image from cache
        run: docker load < /tmp/imgcache/img_indypool.rar
      - name: Load agency image cache
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_AGENCY }}
      - name: Load pool image from cache
        run: docker load < /tmp/imgcache/img_agency.rar
      - name: Load libvcx image cache
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBVCX }}
      - name: Load pool image from cache
        run: docker load < /tmp/imgcache/img_libvcx.rar
      - name: Run libvcx unit tests in Docker
        run: |
          set -x
        docker run --rm -d --name postgres --network host -e POSTGRES_PASSWORD=mysecretpassword postgres:12.1
          docker run --rm -d --name indypool --network host $DOCKER_IMG_NAME_POOL
          docker run --rm -d --name vcxagency --network host $DOCKER_IMG_NAME_AGENCY
          docker run --rm -i --name libvcx --network host $DOCKER_IMG_NAME_LIBVCX \
                              bash -c '(cd $HOME/libvcx && RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test --release)'
