name: CI

on: [push, pull_request]

jobs:
  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_LOWERCASE: ${{ steps.mainstep.outputs.GITHUB_REPOSITORY_LOWERCASE }}
      BRANCH_NAME: ${{ steps.mainstep.outputs.BRANCH_NAME }}
      DOCKER_TAG_VERSION: ${{ steps.mainstep.outputs.DOCKER_TAG_VERSION }}
      RELEASE_VERSION: ${{ steps.mainstep.outputs.RELEASE_VERSION }}
      CACHE_KEY_LIBINDY: ${{ steps.mainstep.outputs.CACHE_KEY_LIBINDY }}
      CACHE_KEY_LIBVCX: ${{ steps.mainstep.outputs.CACHE_KEY_LIBVCX }}
      CACHE_KEY_POOL: ${{ steps.mainstep.outputs.CACHE_KEY_POOL }}
      DOCKER_IMG_NAME_POOL: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_POOL }}
      DOCKER_IMG_NAME_LIBINDY: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_LIBINDY }}
      DOCKER_IMG_NAME_LIBVCX: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_LIBVCX }}
    steps:
      - run: echo $GITHUB_REPOSITORY
      - run: echo $GITHUB_REF
      - run: echo $GITHUB_HEAD_REF
      - run: echo $GITHUB_BASE_REF
      - run: echo $GITHUB_WORKSPACE
      - run: echo $GITHUB_EVENT_NAME
      - run: echo $GITHUB_RUN_NUMBER
      - run: echo $GITHUB_RUN_ID
      - name: Git checkout
        uses: actions/checkout@v1
      - name: Set custom env variables
        run: |
          set -x
          GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`
          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY_LOWERCASE)

          if [[ -z "$GITHUB_HEAD_REF" ]] # is set only if pipeline run is triggered as pull request
          then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash
          echo ::set-env name=BRANCH_NAME::$(echo $BRANCH_NAME)

          DOCKER_TAG_VERSION="$BRANCH_NAME"

          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)
          echo "Docker images built in this CI will be using tag '$DOCKER_TAG_VERSION'"

          echo ::set-env name=DOCKER_TAG_VERSION::$(echo $DOCKER_TAG_VERSION)

          echo ::set-env name=LIBINDY_CACHE::$(echo ${{ hashFiles('libindy.Dockerfile') }})
          echo ::set-env name=LIBVCX_HASH::$(echo ${{ hashFiles('libvcx') }})
          echo ::set-env name=POOL_HASH::$(echo ${{ hashFiles('indy-pool.dockerfile') }})

      - name: Set and print outputs
        id: mainstep
        run: |
          set -x
          echo "::set-output name=GITHUB_REPOSITORY_LOWERCASE::$GITHUB_REPOSITORY_LOWERCASE"
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"
          echo "::set-output name=DOCKER_TAG_VERSION::$DOCKER_TAG_VERSION"
          echo "::set-output name=CACHE_KEY_LIBINDY::$(echo reposlug-$FULL_REPO_SLUG-branch-$BRANCH_NAME-hash-$LIBINDY_HASH)"
          echo "::set-output name=CACHE_KEY_LIBVCX::$(echo reposlug-$FULL_REPO_SLUG-branch-$BRANCH_NAME-hash-$LIBVCX_HASH)"
          echo "::set-output name=CACHE_KEY_POOL::$(echo reposlug-$FULL_REPO_SLUG-branch-$BRANCH_NAME-hash-$POOL_HASH)"
          echo "::set-output name=DOCKER_IMG_NAME_LIBINDY::libindy:$DOCKER_TAG_VERSION"
          echo "::set-output name=DOCKER_IMG_NAME_LIBVCX::libvcx:$DOCKER_TAG_VERSION"
          echo "::set-output name=DOCKER_IMG_NAME_POOL::indypool:$DOCKER_TAG_VERSION"


  build-image-indypool:
    needs:
      - workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_POOL::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_POOL}})
          echo ::set-env name=DOCKER_IMG_NAME_POOL::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_POOL}})
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_POOL }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build -f indy-pool.dockerfile \
                       -t "$DOCKER_IMG_NAME_POOL" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_POOL" > /tmp/imgcache/img_base.rar

  build-image-ubuntu16-libindy:
    needs:
      - workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_LIBINDY::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_LIBINDY}})
          echo ::set-env name=DOCKER_IMG_NAME_LIBINDY::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBINDY}})
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBINDY }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build --build-arg "INDYSDK_REPO=$INDYSDK_REPO" \
                       --build-arg "INDYSDK_REVISION=v$INDYSDK_REVISION" \
                       -f libindy.Dockerfile \
                       -t "$DOCKER_IMG_NAME_LIBINDY" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_BASE" > /tmp/imgcache/img_base.rar

  build-image-ubuntu16-libvcx:
    needs:
      - workflow-setup
    runs-on: ubuntu-16.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Load up custom variables
        run: |
          echo ::set-env name=CACHE_KEY_LIBVCX::$(echo ${{needs.workflow-setup.outputs.CACHE_KEY_LIBVCX}})
          echo ::set-env name=DOCKER_IMG_NAME_LIBVCX::$(echo ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBVCX}})
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBVCX }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          set -x
          docker build -f libvcx.Dockerfile \
                       -t "$DOCKER_IMG_NAME_LIBVCX" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_LIBVCX" > /tmp/imgcache/img_base.rar

#
#  ██      ██ ██████  ██ ███    ██ ██████  ██    ██ 
#  ██      ██ ██   ██ ██ ████   ██ ██   ██  ██  ██  
#  ██      ██ ██████  ██ ██ ██  ██ ██   ██   ████  
#  ██      ██ ██   ██ ██ ██  ██ ██ ██   ██    ██  
#  ███████ ██ ██████  ██ ██   ████ ██████     ██ 
#                                               

#  test-libindy:
#    runs-on: ubuntu-16.04
#    env:
#      DOCKER_BUILDKIT: 1
#    needs: [build-image-indypool, build-image-ubuntu16-libindy]
#    steps:
#      - name: Git checkout
#        uses: actions/checkout@v2
#      - name: Docker setup
#        run: |
#          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')
#          REF_HASH=`echo -n "$GITHUB_REF-$GITHUB_ACTOR" | shasum | cut -f1 -d" "`
#          echo ::set-env name=REF_HASH::$(echo $REF_HASH)
#          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#      - name: Pull image ubuntu16-libindy
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-libindy:$REF_HASH || true
#      - name: Pull image indy_pool
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH || true
#      - name: Run libindy unit tests in Docker
#        run: |
#          set -x
#          docker run -d --name indylocalhost \
#                        --network host \
#                        docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH
#
#          docker run --rm -i --name libindy-tests \
#                              --network host \
#                              docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-libindy:$REF_HASH \
#                              bash -c '(cd $HOME/indy-sdk/libindy && RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test --release)'
#
#  test-libindy-wrapper-rust:
#    runs-on: ubuntu-16.04
#    env:
#      DOCKER_BUILDKIT: 1
#    needs: [build-image-indypool, build-image-ubuntu16-libindy]
#    steps:
#      - name: Git checkout
#        uses: actions/checkout@v2
#      - name: Docker setup
#        run: |
#          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')
#          REF_HASH=`echo -n "$GITHUB_REF-$GITHUB_ACTOR" | shasum | cut -f1 -d" "`
#          echo ::set-env name=REF_HASH::$(echo $REF_HASH)
#          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#      - name: Pull image ubuntu16-libindy
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-libindy:$REF_HASH || true
#      - name: Pull image indy_pool
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH || true
#      - name: Run tests
#        run: |
#          set -x
#          docker run -d --name indylocalhost \
#                        --network host \
#                        docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH
#
#          docker run --rm -i --name libindy-tests \
#                              --network host \
#                              docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-libindy:$REF_HASH \
#                              bash -c '(cd $HOME/indy-sdk/wrappers/rust && RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test --release)'
#
#
#
#
#  #
#  #  ██      ██ ██████  ██    ██  ██████ ██   ██ 
#  #  ██      ██ ██   ██ ██    ██ ██       ██ ██  
#  #  ██      ██ ██████  ██    ██ ██        ███  
#  #  ██      ██ ██   ██  ██  ██  ██       ██ ██ 
#  #  ███████ ██ ██████    ████    ██████ ██   ██ 
#  #
#
#  test-vcxagency:
#    runs-on: ubuntu-16.04
#    needs: [build-image-ubuntu16-vcxagency]
#    env:
#      DOCKER_BUILDKIT: 1
#    steps:
#      - name: Git checkout
#        uses: actions/checkout@v2
#      - name: Docker setup
#        run: |
#          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')
#          REF_HASH=`echo -n "$GITHUB_REF-$GITHUB_ACTOR" | shasum | cut -f1 -d" "`
#          echo ::set-env name=REF_HASH::$(echo $REF_HASH)
#          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#      - name: Pull image ubuntu16-vcxagency
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-vcxagency:$REF_HASH || true
#      - name: Building docker image
#        run: |
#          set -x
#          docker run --rm -i --name libindy-tests \
#                              --network host \
#                              docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-vcxagency:$REF_HASH \
#                              bash -c '(cd $HOME/indy-sdk/vcx/dummy-cloud-agent && RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test)'
#
#
#  test-libvcx:
#    runs-on: ubuntu-16.04
#    env:
#      DOCKER_BUILDKIT: 1
#    needs: [build-image-indypool, build-image-ubuntu16-libvcx, build-image-ubuntu16-vcxagency]
#    steps:
#      - name: Git checkout
#        uses: actions/checkout@v2
#      - name: Docker setup
#        run: |
#          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')
#          REF_HASH=`echo -n "$GITHUB_REF-$GITHUB_ACTOR" | shasum | cut -f1 -d" "`
#          echo ::set-env name=REF_HASH::$(echo $REF_HASH)
#          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#      - name: Pull image ubuntu16-libvcx
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-libvcx:$REF_HASH || true
#      - name: Pull image indy_pool
#        run: |
#          set -x
#          docker pull docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH || true
#      - name: Run libindy unit tests in Docker
#        run: |
#          set -x
#          docker run -d --name indylocalhost \
#                        --network host \
#                        docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH
#
#          docker run -d --name vcxagency \
#                        --network host \
#                        docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-vcxagency:$REF_HASH
#
#          docker run --rm -i --name libindy-tests \
#                              --network host \
#                              docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/ubuntu16-libvcx:$REF_HASH \
#                              bash -c '(cd $HOME/indy-sdk/vcx/libvcx &&  RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test --release)'
#





#
#
#  build-libindy-run-unittests:
#    needs: build-image-indypool
#    runs-on: ubuntu-16.04
#    steps:
#      - name: Check cargo version
#        run: |
#          cargo --version
#          rustc --version
#      - name: Docker setup
#        run: |
#          echo ::set-env name=GITHUB_REPOSITORY_LOWERCASE::$(echo $GITHUB_REPOSITORY | awk '{print tolower($0)}')
#          REF_HASH=`echo -n "$GITHUB_REF-$GITHUB_ACTOR" | shasum | cut -f1 -d" "`
#          echo ::set-env name=REF_HASH::$(echo $REF_HASH)
#          echo ${{ secrets.PACKAGES_ACCESS_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
#      - name: Run indy pool
#        run: |
#          echo "Run pool image cached from previous dependent 'build-pool-image' workflow"
#          docker run -d --name indylocalhost -p 9701-9708:9701-9708 -d docker.pkg.github.com/$GITHUB_REPOSITORY_LOWERCASE/indy_pool:$REF_HASH
#          sleep 2
#          docker ps -a
#      - name: Git checkout
#        uses: actions/checkout@v2
#      - name: "Install libsodium"
#        run: |
#          cd /tmp && \
#          curl https://download.libsodium.org/libsodium/releases/libsodium-1.0.18.tar.gz | tar -xz && \
#          cd /tmp/libsodium-1.0.18 && \
#          ./configure --disable-shared && \
#          sudo make && \
#          sudo make install
#      - name: Install dependencies
#        run: |
#          sudo apt-get update && sudo apt-get install -y libzmq3-dev
#      - name: Build libindy
#        run: |
#          pwd
#          cd libindy
#          cargo build
#      - name: Run libindy unit tests
#        run: |
#          cd libindy
#          RUST_TEST_THREADS=1 TEST_POOL_IP=127.0.0.1 cargo test

#  run-pool-image:
#    needs: build-pool-image
#    runs-on: ubuntu-16.04
#    steps:
#      - name: Building docker image
#        run: |
#          echo "Run pool image cached from previous dependent 'build-pool-image' workflow"
#          docker image ls
#          docker run --name indylocalhost -p 9701-9708:9701-9708 -d indy_pool:$REF_HASH
